// This file was automatically generated. Do not edit.
const taxonomyData = [{"name":"val_rel_equiv_is_val","file":"Definitions.v","type":"Lemma","statement":"forall e, Val e <-> is_val e = true","proofLines":5,"uses":[],"usedBy":["values_do_not_evaluate_2","eval_correct_1","eval_correct_2"],"transitiveUses":0,"transitiveUsedBy":10},{"name":"expr_pair_ind_simple","file":"Induction_Expr.v","type":"Lemma","statement":"forall P : EExp -> EExp -> Prop, (forall x x', P (EId x) (EId x')) -> (forall e1 x e2 e1' x' e2', P e1 e1' -> P e2 e2' -> P (ELet e1 x e2) (ELet e1' x' e2')) -> (forall n n', P (ENum n) (ENum n')) -> (forall s s', P (EStr s) (EStr s')) -> (forall e1 e2 e1' e2', P e1 e1' -> P e2 e2' -> P (EPlus e1 e2) (EPlus e1' e2')) -> (forall e1 e2 e1' e2', P e1 e1' -> P e2 e2' -> P (ETimes e1 e2) (ETimes e1' e2')) -> (forall e1 e2 e1' e2', P e1 e1' -> P e2 e2' -> P (ECat e1 e2) (ECat e1' e2')) -> (forall e1 e1', P e1 e1' -> P (ELen e1) (ELen e1')) -> (forall e e', (match e, e' with | ENum _, ENum _ => False | EStr _, EStr _ => False | EId _, EId _ => False | EPlus _ _, EPlus _ _ => False | ETimes _ _, ETimes _ _ => False | ECat _ _, ECat _ _ => False | ELen _, ELen _ => False | ELet _ _ _, ELet _ _ _ => False | _, _ => True end) -> P e e') -> (forall e e', P e e')","proofLines":53,"uses":[],"usedBy":["expr_pair_ind_aux"],"transitiveUses":0,"transitiveUsedBy":28},{"name":"expr_pair_ind_same_structure","file":"Induction_Expr.v","type":"Lemma","statement":"forall P : EExp -> EExp -> Prop, forall e e', strengthen P e e' -> P e e'","proofLines":3,"uses":["same_structure_refl"],"usedBy":["expr_pair_ind_aux"],"transitiveUses":1,"transitiveUsedBy":28},{"name":"expr_ind_aux","file":"Induction_Expr.v","type":"Lemma","statement":"forall P : EExp -> Prop, (forall x, strengthen_one P (EId x)) -> (forall e1 x e2, strengthen_one P e1 -> strengthen_one P e2 -> strengthen_one P (ELet e1 x e2)) -> (forall n, strengthen_one P (ENum n)) -> (forall s, strengthen_one P (EStr s)) -> (forall e1 e2, strengthen_one P e1 -> strengthen_one P e2 -> strengthen_one P (EPlus e1 e2)) -> (forall e1 e2, strengthen_one P e1 -> strengthen_one P e2 -> strengthen_one P (ETimes e1 e2)) -> (forall e1 e2, strengthen_one P e1 -> strengthen_one P e2 -> strengthen_one P (ECat e1 e2)) -> (forall e1, strengthen_one P e1 -> strengthen_one P (ELen e1)) -> (forall e, P e)","proofLines":14,"uses":["same_structure_refl"],"usedBy":["expr_ind"],"transitiveUses":1,"transitiveUsedBy":39},{"name":"strengthen_one_same_structure","file":"Induction_Expr.v","type":"Lemma","statement":"forall (P : EExp -> Prop) e e', same_structure e e' -> strengthen_one P e -> strengthen_one P e'","proofLines":6,"uses":["same_structure_trans"],"usedBy":["expr_ind"],"transitiveUses":1,"transitiveUsedBy":39},{"name":"expr_ind","file":"Induction_Expr.v","type":"Lemma","statement":"forall P : EExp -> Prop, (forall x, P (EId x)) -> (forall e1 x e2, strengthen_one P e1 -> strengthen_one P e2 -> P (ELet e1 x e2)) -> (forall n, P (ENum n)) -> (forall s, P (EStr s)) -> (forall e1 e2, strengthen_one P e1 -> strengthen_one P e2 -> P (EPlus e1 e2)) -> (forall e1 e2, strengthen_one P e1 -> strengthen_one P e2 -> P (ETimes e1 e2)) -> (forall e1 e2, strengthen_one P e1 -> strengthen_one P e2 -> P (ECat e1 e2)) -> (forall e1, strengthen_one P e1 -> P (ELen e1)) -> (forall e, P e)","proofLines":29,"uses":["expr_ind_aux","strengthen_one_same_structure"],"usedBy":["alpha_equiv_refl","alpha_equiv_trans","fresh_rename_non_existant","fresh_rename_non_existant_free","fresh_rename_fresh_var","fresh_rename_new_bounds","fresh_rename_keeps_alpha_equiv_aux","rename_removes_free_vars","rename_the_free_var","rename_commu","fresh_rename_vs_rename"],"transitiveUses":4,"transitiveUsedBy":38},{"name":"expr_pair_ind_aux","file":"Induction_Expr.v","type":"Lemma","statement":"forall P : EExp -> EExp -> Prop, (forall x x', strengthen P (EId x) (EId x')) -> (forall e1 x e2 e1' x' e2', strengthen P e1 e1' -> strengthen P e2 e2' -> strengthen P (ELet e1 x e2) (ELet e1' x' e2')) -> (forall n n', strengthen P (ENum n) (ENum n')) -> (forall s s', strengthen P (EStr s) (EStr s')) -> (forall e1 e2 e1' e2', strengthen P e1 e1' -> strengthen P e2 e2' -> strengthen P (EPlus e1 e2) (EPlus e1' e2')) -> (forall e1 e2 e1' e2', strengthen P e1 e1' -> strengthen P e2 e2' -> strengthen P (ETimes e1 e2) (ETimes e1' e2')) -> (forall e1 e2 e1' e2', strengthen P e1 e1' -> strengthen P e2 e2' -> strengthen P (ECat e1 e2) (ECat e1' e2')) -> (forall e1 e1', strengthen P e1 e1' -> strengthen P (ELen e1) (ELen e1')) -> (forall e e', diff_constructor e e' -> strengthen P e e') -> (forall e e', P e e')","proofLines":13,"uses":["expr_pair_ind_same_structure","expr_pair_ind_simple"],"usedBy":["expr_pair_ind"],"transitiveUses":3,"transitiveUsedBy":27},{"name":"expr_pair_ind","file":"Induction_Expr.v","type":"Lemma","statement":"forall P : EExp -> EExp -> Prop, (forall x x', P (EId x) (EId x')) -> (forall e1 x e2 e1' x' e2', strengthen P e1 e1' -> strengthen P e2 e2' -> P (ELet e1 x e2) (ELet e1' x' e2')) -> (forall n n', P (ENum n) (ENum n')) -> (forall s s', P (EStr s) (EStr s')) -> (forall e1 e2 e1' e2', strengthen P e1 e1' -> strengthen P e2 e2' -> P (EPlus e1 e2) (EPlus e1' e2')) -> (forall e1 e2 e1' e2', strengthen P e1 e1' -> strengthen P e2 e2' -> P (ETimes e1 e2) (ETimes e1' e2')) -> (forall e1 e2 e1' e2', strengthen P e1 e1' -> strengthen P e2 e2' -> P (ECat e1 e2) (ECat e1' e2')) -> (forall e1 e1', strengthen P e1 e1' -> P (ELen e1) (ELen e1')) -> (forall e e', diff_constructor e e' -> P e e') -> (forall e e', P e e')","proofLines":101,"uses":["expr_pair_ind_aux","same_structure_trans"],"usedBy":["alpha_equiv_renamed_1","alpha_equiv_renamed","alpha_equiv_func_equiv_rel_2"],"transitiveUses":5,"transitiveUsedBy":26},{"name":"alpha_equiv_refl","file":"Lemmas_AlphaEquiv.v","type":"Lemma","statement":"forall e, alpha_equiv_rel e e","proofLines":20,"uses":["expr_ind","same_structure_refl","rename_keeps_structure"],"usedBy":["rename_keeps_alpha_equiv","alpha_equiv_Equiv","substitutivity_aux"],"transitiveUses":6,"transitiveUsedBy":11},{"name":"alpha_equiv_sym","file":"Lemmas_AlphaEquiv.v","type":"Lemma","statement":"forall e e', alpha_equiv_rel e e' -> alpha_equiv_rel e' e","proofLines":12,"uses":[],"usedBy":["fresh_rename_keeps_alpha_equiv_2","fresh_rename_keeps_alpha_equiv_3","alpha_equiv_renamed","alpha_equiv_Equiv","subst_with_rename_alpha_equiv","decomposition"],"transitiveUses":0,"transitiveUsedBy":24},{"name":"alpha_equiv_have_same_structure","file":"Lemmas_AlphaEquiv.v","type":"Lemma","statement":"forall e e', alpha_equiv_rel e e' -> same_structure e e'","proofLines":12,"uses":["same_structure_trans","rename_keeps_structure","fresh_var_not_in_all_vars_left","fresh_var_not_in_all_vars_right","same_structure_sym"],"usedBy":["diff_constructor_not_alpha"],"transitiveUses":7,"transitiveUsedBy":25},{"name":"diff_constructor_not_alpha","file":"Lemmas_AlphaEquiv.v","type":"Lemma","statement":"forall e e', diff_constructor e e' -> forall e'' e''', same_structure e e'' -> same_structure e' e''' -> alpha_equiv_rel e'' e''' -> False","proofLines":10,"uses":["alpha_equiv_have_same_structure","same_structure_trans","same_structure_sym"],"usedBy":["alpha_equiv_renamed"],"transitiveUses":8,"transitiveUsedBy":24},{"name":"alpha_equiv_same_free_vars","file":"Lemmas_AlphaEquiv.v","type":"Lemma","statement":"forall e e', alpha_equiv_rel e e' -> free_vars e = free_vars e'","proofLines":87,"uses":["fresh_var_not_in_all_vars_left","fresh_var_not_in_all_vars_right","rename_removes_free_vars","rename_keeps_other_free_vars","not_in_expr_not_free"],"usedBy":["alpha_equiv_renamed_1","substitutivity_aux","subst_with_rename_alpha_equiv"],"transitiveUses":12,"transitiveUsedBy":26},{"name":"alpha_equiv_trans","file":"Lemmas_AlphaEquiv_2.v","type":"Lemma","statement":"forall e e' e'', alpha_equiv_rel e e' -> alpha_equiv_rel e' e'' -> alpha_equiv_rel e e''","proofLines":62,"uses":["expr_ind","same_structure_refl","fresh_var_not_in_all_vars","rename_keeps_structure","alpha_equiv_renamed"],"usedBy":["fresh_rename_keeps_alpha_equiv_2","fresh_rename_keeps_alpha_equiv_3","alpha_equiv_Equiv","subst_with_rename_alpha_equiv","rename_vs_subst_2"],"transitiveUses":33,"transitiveUsedBy":10},{"name":"fresh_rename_keeps_depth","file":"Lemmas_FreshRename.v","type":"Lemma","statement":"forall e bv x, depth e = depth (fresh_rename e bv x)","proofLines":9,"uses":[],"usedBy":["subst_same_depth"],"transitiveUses":0,"transitiveUsedBy":1},{"name":"fresh_rename_non_existant","file":"Lemmas_FreshRename.v","type":"Lemma","statement":"forall e bv x o, all_vars e x = false -> (fresh_rename e bv o) = (fresh_rename e (removeFromSet bv x) o)","proofLines":41,"uses":["expr_ind","same_structure_refl","update_set_permute_remove"],"usedBy":["fresh_rename_keeps_alpha_equiv_aux"],"transitiveUses":6,"transitiveUsedBy":16},{"name":"fresh_rename_non_existant_free","file":"Lemmas_FreshRename.v","type":"Lemma","statement":"forall e bv x o, free_vars e x = false -> (fresh_rename e (updateSet bv x) o) = (fresh_rename e bv o)","proofLines":44,"uses":["expr_ind","same_structure_refl","update_set_twice","update_set_permute"],"usedBy":["fresh_rename_keeps_alpha_equiv_aux"],"transitiveUses":7,"transitiveUsedBy":16},{"name":"fresh_rename_fresh_var","file":"Lemmas_FreshRename.v","type":"Lemma","statement":"forall e bv o, get_fresh_var (fresh_rename e bv o) <= get_fresh_var e + o","proofLines":23,"uses":["expr_ind","same_structure_refl"],"usedBy":["fresh_rename_keeps_alpha_equiv_aux"],"transitiveUses":5,"transitiveUsedBy":16},{"name":"fresh_rename_new_bounds","file":"Lemmas_FreshRename.v","type":"Lemma","statement":"forall e bv o, (forall v, bound_vars (fresh_rename e bv o) v = true -> o <= v)","proofLines":22,"uses":["expr_ind","same_structure_refl"],"usedBy":["fresh_rename_removes_conflicts","substitutivity","subst_with_rename_alpha_equiv"],"transitiveUses":5,"transitiveUsedBy":13},{"name":"fresh_rename_removes_vars","file":"Lemmas_FreshRename.v","type":"Lemma","statement":"forall e o bv v, v < o -> bv v = true -> all_vars (fresh_rename e bv o) v = false","proofLines":27,"uses":[],"usedBy":["fresh_rename_vs_rename_2"],"transitiveUses":0,"transitiveUsedBy":7},{"name":"fresh_rename_keeps_alpha_equiv_aux","file":"Lemmas_FreshRename_AlphaEquiv.v","type":"Lemma","statement":"forall e bv o, (forall v, all_vars e v = true -> all_vars e (o + v) = false) -> (forall v, free_vars e v = true -> bv v = false) -> alpha_equiv_rel e (fresh_rename e bv o)","proofLines":219,"uses":["expr_ind","same_structure_refl","alpha_equiv_renamed","fresh_rename_vs_rename","fresh_rename_non_existant","update_set_permute_remove","fresh_rename_non_existant_free","rename_removes_free_vars","rename_keeps_structure","rename_keeps_other_free_vars","rename_keeps_other_vars","rename_does_not_add_new_var","fresh_var_not_in_all_vars","fresh_rename_fresh_var"],"usedBy":["fresh_rename_keeps_alpha_equiv","fresh_rename_keeps_alpha_equiv_2"],"transitiveUses":41,"transitiveUsedBy":15},{"name":"fresh_rename_keeps_alpha_equiv","file":"Lemmas_FreshRename_AlphaEquiv.v","type":"Lemma","statement":"forall e x, get_fresh_var e <= x -> alpha_equiv_rel e (fresh_rename e emptySet x)","proofLines":5,"uses":["fresh_rename_keeps_alpha_equiv_aux","fresh_var_not_in_all_vars"],"usedBy":["fresh_rename_keeps_alpha_equiv_3","subst_with_rename_alpha_equiv","substitution","decomposition"],"transitiveUses":42,"transitiveUsedBy":10},{"name":"fresh_rename_keeps_alpha_equiv_2","file":"Lemmas_FreshRename_AlphaEquiv.v","type":"Lemma","statement":"forall e e' o o', (forall v, all_vars e v = true -> all_vars e (o + v) = false) -> (forall v, all_vars e' v = true -> all_vars e' (o' + v) = false) -> alpha_equiv_rel e e' -> alpha_equiv_rel (fresh_rename e emptySet o) (fresh_rename e' emptySet o')","proofLines":10,"uses":["fresh_rename_keeps_alpha_equiv_aux","alpha_equiv_sym","alpha_equiv_trans"],"usedBy":["substitutivity"],"transitiveUses":43,"transitiveUsedBy":6},{"name":"fresh_rename_keeps_alpha_equiv_3","file":"Lemmas_FreshRename_AlphaEquiv.v","type":"Lemma","statement":"forall e e' o o', get_fresh_var e <= o -> get_fresh_var e' <= o' -> alpha_equiv_rel e e' -> alpha_equiv_rel (fresh_rename e emptySet o) (fresh_rename e' emptySet o')","proofLines":6,"uses":["fresh_rename_keeps_alpha_equiv","alpha_equiv_sym","alpha_equiv_trans"],"usedBy":["subst_with_rename_alpha_equiv"],"transitiveUses":44,"transitiveUsedBy":5},{"name":"rename_keeps_structure","file":"Lemmas_Rename.v","type":"Lemma","statement":"forall e x x', same_structure e (rename e x x')","proofLines":9,"uses":["same_structure_refl"],"usedBy":["alpha_equiv_refl","alpha_equiv_have_same_structure","alpha_equiv_trans","fresh_rename_keeps_alpha_equiv_aux","alpha_equiv_renamed","alpha_equiv_func_equiv_rel_2"],"transitiveUses":1,"transitiveUsedBy":27},{"name":"rename_the_same","file":"Lemmas_Rename.v","type":"Lemma","statement":"forall e x, e = rename e x x","proofLines":15,"uses":[],"usedBy":["rename_keeps_other_free_vars","rename_keeps_other_vars","rename_the_free_var"],"transitiveUses":0,"transitiveUsedBy":31},{"name":"rename_non_existant","file":"Lemmas_Rename.v","type":"Lemma","statement":"forall e x x', all_vars e x = false -> e = rename e x x'","proofLines":37,"uses":[],"usedBy":["rename_does_not_add_new_var","complex","fresh_rename_vs_rename_2"],"transitiveUses":0,"transitiveUsedBy":28},{"name":"rename_non_existant_free","file":"Lemmas_Rename.v","type":"Lemma","statement":"forall e x x', free_vars e x = false -> e = rename e x x'","proofLines":40,"uses":[],"usedBy":["rename_twice","alpha_equiv_renamed_1","alpha_equiv_renamed","rename_vs_subst"],"transitiveUses":0,"transitiveUsedBy":28},{"name":"rename_non_existant_free_2","file":"Lemmas_Rename.v","type":"Lemma","statement":"forall e x x', (x =? x' = false) -> e = rename e x x' -> free_vars e x = false","proofLines":46,"uses":[],"usedBy":["complex"],"transitiveUses":0,"transitiveUsedBy":25},{"name":"rename_removes_free_vars","file":"Lemmas_Rename.v","type":"Lemma","statement":"forall e x x', (x =? x' = false) -> free_vars (rename e x x') x = false","proofLines":60,"uses":["expr_ind","same_structure_refl"],"usedBy":["alpha_equiv_same_free_vars","fresh_rename_keeps_alpha_equiv_aux","rename_twice","alpha_equiv_renamed_1","complex","substitutivity_aux"],"transitiveUses":5,"transitiveUsedBy":28},{"name":"rename_keeps_other_free_vars","file":"Lemmas_Rename.v","type":"Lemma","statement":"forall e x x' v, (v =? x = false) -> (v =? x' = false) -> free_vars e v = free_vars (rename e x x') v","proofLines":38,"uses":["rename_the_same"],"usedBy":["alpha_equiv_same_free_vars","fresh_rename_keeps_alpha_equiv_aux","alpha_equiv_renamed_1","complex","substitutivity_aux"],"transitiveUses":1,"transitiveUsedBy":27},{"name":"rename_keeps_other_vars","file":"Lemmas_Rename.v","type":"Lemma","statement":"forall e x x' v, (v =? x = false) -> (v =? x' = false) -> all_vars e v = all_vars (rename e x x') v","proofLines":38,"uses":["rename_the_same"],"usedBy":["fresh_rename_keeps_alpha_equiv_aux","rename_does_not_add_new_var","complex","alpha_equiv_renamed"],"transitiveUses":1,"transitiveUsedBy":26},{"name":"rename_the_free_var","file":"Lemmas_Rename.v","type":"Lemma","statement":"forall e x x', free_vars e x = true -> all_vars e x' = false -> free_vars (rename e x x') x' = true","proofLines":101,"uses":["rename_the_same","expr_ind","same_structure_refl"],"usedBy":["alpha_equiv_renamed_1"],"transitiveUses":6,"transitiveUsedBy":26},{"name":"rename_commu","file":"Lemmas_Rename.v","type":"Lemma","statement":"forall e a b c d, a =? c = false -> a =? d = false -> b =? c = false -> b =? d = false -> (rename (rename e a b) c d) = (rename (rename e c d) a b)","proofLines":59,"uses":["expr_ind","same_structure_refl"],"usedBy":["complex","alpha_equiv_renamed","rename_keeps_alpha_equiv"],"transitiveUses":5,"transitiveUsedBy":25},{"name":"rename_does_not_add_new_var","file":"Lemmas_Rename.v","type":"Lemma","statement":"forall e x x' z, x' =? z = false -> all_vars e z = false -> all_vars (rename e x x') z = false","proofLines":7,"uses":["rename_non_existant","rename_keeps_other_vars"],"usedBy":["fresh_rename_keeps_alpha_equiv_aux","rename_keeps_alpha_equiv"],"transitiveUses":3,"transitiveUsedBy":18},{"name":"rename_keeps_bound_vars","file":"Lemmas_Rename.v","type":"Lemma","statement":"forall e x x' v, bound_vars e v = bound_vars (rename e x x') v","proofLines":26,"uses":[],"usedBy":["substitutivity_aux"],"transitiveUses":0,"transitiveUsedBy":8},{"name":"rename_twice","file":"Lemmas_Rename.v","type":"Lemma","statement":"forall e a b c, (a =? b) = false -> all_vars e b = false -> (rename e a b) = (rename (rename e a b) a c)","proofLines":4,"uses":["rename_removes_free_vars","rename_non_existant_free"],"usedBy":["rename_keeps_alpha_equiv"],"transitiveUses":7,"transitiveUsedBy":3},{"name":"alpha_equiv_renamed_1","file":"Lemmas_Rename_AlphaEquiv.v","type":"Lemma","statement":"forall e e' x z, free_vars e z = false -> all_vars e' z = false -> alpha_equiv_rel e (rename e' x z) -> e' = (rename e' x z)","proofLines":144,"uses":["expr_pair_ind","same_structure_refl","fresh_var_not_in_all_vars","alpha_equiv_same_free_vars","rename_the_free_var","rename_keeps_other_free_vars","rename_removes_free_vars","rename_non_existant_free"],"usedBy":["complex"],"transitiveUses":19,"transitiveUsedBy":25},{"name":"complex","file":"Lemmas_Rename_AlphaEquiv.v","type":"Lemma","statement":"forall e e' x x' x'' z, all_vars e z = false -> all_vars e' z = false -> (x' =? z) = false -> (x'' =? x') = false -> (forall newX : nat, all_vars e newX = false -> all_vars (rename e' x'' z) newX = false -> alpha_equiv_rel (rename e x newX) (rename (rename e' x'' z) x' newX) ) -> free_vars e' x'' = false","proofLines":69,"uses":["not_in_expr_not_free","complex_max","rename_removes_free_vars","rename_keeps_other_free_vars","rename_keeps_other_vars","rename_non_existant","rename_commu","alpha_equiv_renamed_1","rename_non_existant_free_2"],"usedBy":["alpha_equiv_renamed"],"transitiveUses":25,"transitiveUsedBy":24},{"name":"alpha_equiv_renamed","file":"Lemmas_Rename_AlphaEquiv.v","type":"Lemma","statement":"forall e e' x x' z z', all_vars e z = false -> all_vars e' z = false -> all_vars e z' = false -> all_vars e' z' = false -> alpha_equiv_rel (rename e x z) (rename e' x' z) -> alpha_equiv_rel (rename e x z') (rename e' x' z')","proofLines":179,"uses":["expr_pair_ind","same_structure_refl","complex","rename_non_existant_free","alpha_equiv_sym","complex_max_2","rename_commu","rename_keeps_other_vars","rename_keeps_structure","diff_constructor_not_alpha"],"usedBy":["alpha_equiv_trans","fresh_rename_keeps_alpha_equiv_aux","rename_keeps_alpha_equiv","alpha_equiv_func_equiv_rel_2","substitutivity_aux"],"transitiveUses":32,"transitiveUsedBy":23},{"name":"rename_keeps_alpha_equiv","file":"Lemmas_Rename_AlphaEquiv.v","type":"Lemma","statement":"forall e e' x z, all_vars e z = false -> all_vars e' z = false -> alpha_equiv_rel e e' -> alpha_equiv_rel (rename e x z) (rename e' x z)","proofLines":119,"uses":["alpha_equiv_refl","complex_max_2","alpha_equiv_renamed","rename_commu","rename_twice","rename_does_not_add_new_var"],"usedBy":["alpha_equiv_preserved_by_let"],"transitiveUses":36,"transitiveUsedBy":2},{"name":"fresh_rename_vs_rename","file":"Lemmas_Rename_FreshRename.v","type":"Lemma","statement":"forall e bv o x x', (forall v, all_vars e v = true -> all_vars e (o + v) = false) -> all_vars e (x + o) = false -> all_vars e x' = false -> bv x' = false -> rename (fresh_rename e (updateSet bv x) o) (x + o) x' = fresh_rename (rename e x x') (updateSet bv x) o","proofLines":133,"uses":["expr_ind","same_structure_refl","update_set_permute"],"usedBy":["fresh_rename_keeps_alpha_equiv_aux"],"transitiveUses":6,"transitiveUsedBy":16},{"name":"fresh_rename_vs_rename_2","file":"Lemmas_Rename_FreshRename.v","type":"Lemma","statement":"forall e x x' bv o, all_vars e x' = false -> get_fresh_var e <= o -> bv x = false -> bv x' = false -> (forall z, bv z = true -> x =? z + o = false) -> rename (fresh_rename e bv o) x x' = fresh_rename (rename e x x') bv o","proofLines":69,"uses":["rename_non_existant","fresh_rename_removes_vars","fresh_var_not_in_all_vars"],"usedBy":["fresh_rename_vs_rename_3"],"transitiveUses":3,"transitiveUsedBy":6},{"name":"fresh_rename_vs_rename_3","file":"Lemmas_Rename_FreshRename.v","type":"Lemma","statement":"forall e x x' o, all_vars e x' = false -> get_fresh_var e <= o -> rename (fresh_rename e emptySet o) x x' = fresh_rename (rename e x x') emptySet o","proofLines":3,"uses":["fresh_rename_vs_rename_2"],"usedBy":["subst_with_rename_alpha_equiv"],"transitiveUses":4,"transitiveUsedBy":5},{"name":"rename_vs_subst","file":"Lemmas_Rename_Subst.v","type":"Lemma","statement":"forall e e' x y z, (x =? y) = false -> (x =? z) = false -> free_vars e' y = false -> rename (subst' e' x e) y z = subst' e' x (rename e y z)","proofLines":39,"uses":["rename_non_existant_free"],"usedBy":["substitutivity_aux"],"transitiveUses":1,"transitiveUsedBy":8},{"name":"subst'_vs_rename","file":"Lemmas_Rename_Subst.v","type":"Lemma","statement":"forall e e' x x', all_vars e x' = false -> (subst' e' x e) = (subst' e' x' (rename e x x'))","proofLines":31,"uses":["subst_non_free_var","not_in_expr_not_free"],"usedBy":["subst_with_rename_alpha_equiv"],"transitiveUses":2,"transitiveUsedBy":5},{"name":"same_structure_refl","file":"Lemmas_Same_Structure.v","type":"Lemma","statement":"forall e, same_structure e e","proofLines":1,"uses":[],"usedBy":["expr_pair_ind_same_structure","expr_ind_aux","alpha_equiv_refl","alpha_equiv_trans","fresh_rename_non_existant","fresh_rename_non_existant_free","fresh_rename_fresh_var","fresh_rename_new_bounds","fresh_rename_keeps_alpha_equiv_aux","rename_keeps_structure","rename_removes_free_vars","rename_the_free_var","rename_commu","alpha_equiv_renamed_1","alpha_equiv_renamed","fresh_rename_vs_rename","alpha_equiv_func_equiv_rel_2"],"transitiveUses":0,"transitiveUsedBy":46},{"name":"same_structure_sym","file":"Lemmas_Same_Structure.v","type":"Lemma","statement":"forall e e', same_structure e e' -> same_structure e' e","proofLines":1,"uses":[],"usedBy":["alpha_equiv_have_same_structure","diff_constructor_not_alpha"],"transitiveUses":0,"transitiveUsedBy":26},{"name":"same_structure_trans","file":"Lemmas_Same_Structure.v","type":"Lemma","statement":"forall e e' e'', same_structure e e' -> same_structure e' e'' -> same_structure e e''","proofLines":10,"uses":[],"usedBy":["strengthen_one_same_structure","expr_pair_ind","alpha_equiv_have_same_structure","diff_constructor_not_alpha"],"transitiveUses":0,"transitiveUsedBy":43},{"name":"fresh_rename_removes_conflicts","file":"Lemmas_Subst.v","type":"Lemma","statement":"forall e e' o, o = max (get_fresh_var e) (get_fresh_var e') -> (forall v, bound_vars (fresh_rename e emptySet o) v = true -> free_vars e' v = false)","proofLines":4,"uses":["fresh_rename_new_bounds","not_in_expr_not_free","fresh_var_not_in_all_vars"],"usedBy":["subst_with_rename_alpha_equiv","substitution","decomposition"],"transitiveUses":8,"transitiveUsedBy":10},{"name":"subst_non_free_var","file":"Lemmas_Subst.v","type":"Lemma","statement":"forall e e' x, free_vars e x = false -> e = subst' e' x e","proofLines":27,"uses":[],"usedBy":["subst'_vs_rename","substitutivity_aux"],"transitiveUses":0,"transitiveUsedBy":9},{"name":"subst'_same_depth","file":"Lemmas_Subst.v","type":"Lemma","statement":"forall e e' e'' x, depth e' = 0 -> depth e'' = depth e -> depth e'' = depth (subst' e' x e)","proofLines":36,"uses":[],"usedBy":["subst_same_depth"],"transitiveUses":0,"transitiveUsedBy":1},{"name":"all_vars_free_plus_bound","file":"Lemmas_Vars.v","type":"Lemma","statement":"forall e, all_vars e = unionSet (free_vars e) (bound_vars e)","proofLines":39,"uses":[],"usedBy":["subst_with_rename_alpha_equiv"],"transitiveUses":0,"transitiveUsedBy":5},{"name":"not_in_expr_not_free","file":"Lemmas_Vars.v","type":"Lemma","statement":"forall e z, all_vars e z = false -> free_vars e z = false","proofLines":25,"uses":[],"usedBy":["alpha_equiv_same_free_vars","complex","subst'_vs_rename","fresh_rename_removes_conflicts","substitutivity","subst_with_rename_alpha_equiv","same_type_with_renamed"],"transitiveUses":0,"transitiveUsedBy":31},{"name":"fresh_var_not_in_all_vars","file":"Lemmas_Vars.v","type":"Lemma","statement":"forall e v, get_fresh_var e <= v -> all_vars e v = false","proofLines":22,"uses":[],"usedBy":["alpha_equiv_trans","fresh_rename_keeps_alpha_equiv_aux","fresh_rename_keeps_alpha_equiv","alpha_equiv_renamed_1","fresh_rename_vs_rename_2","fresh_rename_removes_conflicts","fresh_var_not_in_all_vars_left","fresh_var_not_in_all_vars_right","complex_max","complex_max_2","substitutivity","subst_with_rename_alpha_equiv","alpha_variants_same_eval_aux"],"transitiveUses":0,"transitiveUsedBy":38},{"name":"fresh_var_not_in_all_vars_left","file":"Lemmas_Vars.v","type":"Lemma","statement":"forall e e', all_vars e (max (get_fresh_var e) (get_fresh_var e')) = false","proofLines":1,"uses":["fresh_var_not_in_all_vars"],"usedBy":["alpha_equiv_have_same_structure","alpha_equiv_same_free_vars","alpha_equiv_func_equiv_rel_1","alpha_equiv_func_equiv_rel_2","alpha_variants_same_type"],"transitiveUses":1,"transitiveUsedBy":31},{"name":"fresh_var_not_in_all_vars_right","file":"Lemmas_Vars.v","type":"Lemma","statement":"forall e e', all_vars e' (max (get_fresh_var e) (get_fresh_var e')) = false","proofLines":1,"uses":["fresh_var_not_in_all_vars"],"usedBy":["alpha_equiv_have_same_structure","alpha_equiv_same_free_vars","alpha_equiv_func_equiv_rel_1","alpha_equiv_func_equiv_rel_2","alpha_variants_same_type"],"transitiveUses":1,"transitiveUsedBy":31},{"name":"complex_max","file":"Lemmas_Vars.v","type":"Lemma","statement":"forall e e' a b c d newX, newX = (max (max (get_fresh_var e) (get_fresh_var e')) (max (max (S a) (S b)) (max (S c) (S d))) ) -> (a =? newX) = false /\\ (b =? newX) = false /\\ (c =? newX) = false /\\ (d =? newX) = false /\\ all_vars e newX = false /\\ all_vars e' newX = false","proofLines":8,"uses":["fresh_var_not_in_all_vars"],"usedBy":["complex","substitutivity_aux"],"transitiveUses":1,"transitiveUsedBy":25},{"name":"complex_max_2","file":"Lemmas_Vars.v","type":"Lemma","statement":"forall e e' e'' e''' a b c d newX, newX = max (max (max (get_fresh_var e) (get_fresh_var e')) (max (get_fresh_var e'') (get_fresh_var e''')) ) (max (max (S a) (S b)) (max (S c) (S d))) -> (a =? newX) = false /\\ (b =? newX) = false /\\ (c =? newX) = false /\\ (d =? newX) = false /\\ all_vars e newX = false /\\ all_vars e' newX = false /\\ all_vars e'' newX = false /\\ all_vars e''' newX = false","proofLines":9,"uses":["fresh_var_not_in_all_vars"],"usedBy":["alpha_equiv_renamed","rename_keeps_alpha_equiv","substitutivity_aux"],"transitiveUses":1,"transitiveUsedBy":24},{"name":"max_zero","file":"Lemmas_Vars.v","type":"Lemma","statement":"forall a b, max a b = 0 -> a = 0 /\\ b = 0","proofLines":1,"uses":[],"usedBy":["fresh_var_zero"],"transitiveUses":0,"transitiveUsedBy":1},{"name":"update_neq","file":"PartialMap_Set.v","type":"Lemma","statement":"forall A (m : partial_map A) x1 x2 v, x2 <> x1 -> (x2 |-> v ; m) x1 = m x1","proofLines":2,"uses":[],"usedBy":["weakening","weakening_2","substitution_aux"],"transitiveUses":0,"transitiveUsedBy":12},{"name":"update_permute","file":"PartialMap_Set.v","type":"Lemma","statement":"forall A (m : partial_map A) v1 v2 x1 x2, x2 <> x1 -> (x1 |-> v1 ; x2 |-> v2 ; m) = (x2 |-> v2 ; x1 |-> v1 ; m)","proofLines":9,"uses":[],"usedBy":["weakening","weakening_2","weakening_3","same_type_with_renamed","substitution_aux","decomposition_aux"],"transitiveUses":0,"transitiveUsedBy":13},{"name":"update_shadow","file":"PartialMap_Set.v","type":"Lemma","statement":"forall (A : Type) (m : partial_map A) x v1 v2, (x |-> v2 ; x |-> v1 ; m) = (x |-> v2 ; m)","proofLines":4,"uses":[],"usedBy":["weakening","weakening_2","weakening_3","same_type_with_renamed","substitution_aux","decomposition_aux"],"transitiveUses":0,"transitiveUsedBy":13},{"name":"update_set_permute","file":"PartialMap_Set.v","type":"Lemma","statement":"forall s a b, updateSet (updateSet s a) b = updateSet (updateSet s b) a","proofLines":5,"uses":[],"usedBy":["fresh_rename_non_existant_free","fresh_rename_vs_rename"],"transitiveUses":0,"transitiveUsedBy":18},{"name":"update_set_permute_remove","file":"PartialMap_Set.v","type":"Lemma","statement":"forall s a b, (a =? b) = false -> updateSet (removeFromSet s a) b = removeFromSet (updateSet s b) a","proofLines":7,"uses":[],"usedBy":["fresh_rename_non_existant","fresh_rename_keeps_alpha_equiv_aux"],"transitiveUses":0,"transitiveUsedBy":17},{"name":"update_set_twice","file":"PartialMap_Set.v","type":"Lemma","statement":"forall s x, (updateSet (updateSet s x) x) = (updateSet s x)","proofLines":6,"uses":[],"usedBy":["fresh_rename_non_existant_free"],"transitiveUses":0,"transitiveUsedBy":17},{"name":"alpha_equiv_func_equiv_rel_1","file":"Theorems_AlphaEquiv.v","type":"Lemma","statement":"forall e e', alpha_equiv_rel e e' -> (alpha_equiv e e') = true","proofLines":14,"uses":["fresh_var_not_in_all_vars_left","fresh_var_not_in_all_vars_right"],"usedBy":["alpha_equiv_func_equiv_rel"],"transitiveUses":3,"transitiveUsedBy":2},{"name":"alpha_equiv_func_equiv_rel_2","file":"Theorems_AlphaEquiv.v","type":"Lemma","statement":"forall e e', alpha_equiv e e' = true -> alpha_equiv_rel e e'","proofLines":38,"uses":["expr_pair_ind","same_structure_refl","alpha_equiv_renamed","rename_keeps_structure","fresh_var_not_in_all_vars_right","fresh_var_not_in_all_vars_left"],"usedBy":["alpha_equiv_func_equiv_rel"],"transitiveUses":33,"transitiveUsedBy":2},{"name":"alpha_equiv_func_equiv_rel","file":"Theorems_AlphaEquiv.v","type":"Theorem","statement":"forall e e', alpha_equiv_rel e e' <-> (alpha_equiv e e') = true","proofLines":3,"uses":["alpha_equiv_func_equiv_rel_1","alpha_equiv_func_equiv_rel_2"],"usedBy":[],"transitiveUses":35,"transitiveUsedBy":0},{"name":"alpha_equiv_Equiv","file":"Theorems_AlphaEquiv.v","type":"Instance","statement":"Equivalence alpha_equiv_rel","proofLines":4,"uses":["alpha_equiv_refl","alpha_equiv_sym","alpha_equiv_trans"],"usedBy":[],"transitiveUses":35,"transitiveUsedBy":0},{"name":"alpha_equiv_preserved_by_plus","file":"Theorems_AlphaEquiv.v","type":"Lemma","statement":"Proper (alpha_equiv_rel ==> alpha_equiv_rel ==> alpha_equiv_rel) (EPlus)","proofLines":2,"uses":[],"usedBy":[],"transitiveUses":0,"transitiveUsedBy":0},{"name":"alpha_equiv_preserved_by_times","file":"Theorems_AlphaEquiv.v","type":"Lemma","statement":"Proper (alpha_equiv_rel ==> alpha_equiv_rel ==> alpha_equiv_rel) (ETimes)","proofLines":2,"uses":[],"usedBy":[],"transitiveUses":0,"transitiveUsedBy":0},{"name":"alpha_equiv_preserved_by_cat","file":"Theorems_AlphaEquiv.v","type":"Lemma","statement":"Proper (alpha_equiv_rel ==> alpha_equiv_rel ==> alpha_equiv_rel) (ECat)","proofLines":2,"uses":[],"usedBy":[],"transitiveUses":0,"transitiveUsedBy":0},{"name":"alpha_equiv_preserved_by_len","file":"Theorems_AlphaEquiv.v","type":"Lemma","statement":"Proper (alpha_equiv_rel ==> alpha_equiv_rel) (ELen)","proofLines":2,"uses":[],"usedBy":[],"transitiveUses":0,"transitiveUsedBy":0},{"name":"alpha_equiv_preserved_by_let","file":"Theorems_AlphaEquiv.v","type":"Lemma","statement":"(x : nat) : Proper (alpha_equiv_rel ==> alpha_equiv_rel ==> alpha_equiv_rel) (ELet2 x)","proofLines":6,"uses":["rename_keeps_alpha_equiv"],"usedBy":[],"transitiveUses":37,"transitiveUsedBy":0},{"name":"substitutivity_aux","file":"Theorems_AlphaEquiv.v","type":"Lemma","statement":"forall e e' e'' e''' x, (forall v, bound_vars e v = true -> free_vars e'' v = false) -> (forall v, bound_vars e' v = true -> free_vars e''' v = false) -> alpha_equiv_rel e e' -> alpha_equiv_rel e'' e''' -> alpha_equiv_rel (subst' e'' x e) (subst' e''' x e')","proofLines":118,"uses":["alpha_equiv_refl","complex_max","subst_non_free_var","alpha_equiv_same_free_vars","rename_removes_free_vars","rename_keeps_other_free_vars","complex_max_2","alpha_equiv_renamed","rename_vs_subst","rename_keeps_bound_vars"],"usedBy":["substitutivity","subst_with_rename_alpha_equiv"],"transitiveUses":37,"transitiveUsedBy":7},{"name":"substitutivity","file":"Theorems_AlphaEquiv.v","type":"Theorem","statement":"forall e e' e'' e''' x, alpha_equiv_rel e e' -> alpha_equiv_rel e'' e''' -> alpha_equiv_rel (subst e'' x e) (subst e''' x e')","proofLines":19,"uses":["substitutivity_aux","fresh_rename_new_bounds","not_in_expr_not_free","fresh_var_not_in_all_vars","fresh_rename_keeps_alpha_equiv_2"],"usedBy":["substitutivity_proper","rename_vs_subst_2"],"transitiveUses":50,"transitiveUsedBy":4},{"name":"subst_with_rename_alpha_equiv","file":"Theorems_AlphaEquiv.v","type":"Lemma","statement":"forall e e' x x', all_vars e x' = false -> alpha_equiv_rel (subst e' x e) (subst e' x' (rename e x x'))","proofLines":62,"uses":["fresh_rename_keeps_alpha_equiv_3","fresh_rename_vs_rename_3","subst'_vs_rename","all_vars_free_plus_bound","alpha_equiv_same_free_vars","not_in_expr_not_free","fresh_rename_keeps_alpha_equiv","fresh_rename_new_bounds","substitutivity_aux","fresh_rename_removes_conflicts","fresh_var_not_in_all_vars","alpha_equiv_trans","alpha_equiv_sym"],"usedBy":["rename_vs_subst_2"],"transitiveUses":57,"transitiveUsedBy":4},{"name":"rename_vs_subst_2","file":"Theorems_AlphaEquiv.v","type":"Lemma","statement":"forall e1 x e2 x' e2' z, all_vars e2 z = false -> all_vars e2' z = false -> alpha_equiv_rel (rename e2 x z) (rename e2' x' z) -> alpha_equiv_rel (subst e1 x e2) (subst e1 x' e2')","proofLines":7,"uses":["subst_with_rename_alpha_equiv","alpha_equiv_trans","substitutivity"],"usedBy":["alpha_variants_same_eval_aux"],"transitiveUses":60,"transitiveUsedBy":3},{"name":"finality_of_values","file":"Theorems_Eval.v","type":"Lemma","statement":"forall e, Val e /\\ (exists e', Eval e e') -> False","proofLines":2,"uses":[],"usedBy":[],"transitiveUses":0,"transitiveUsedBy":0},{"name":"determinacy","file":"Theorems_Eval.v","type":"Lemma","statement":"forall e e' e'', Eval e e' -> Eval e e'' -> e' = e''","proofLines":46,"uses":[],"usedBy":[],"transitiveUses":0,"transitiveUsedBy":0},{"name":"values_do_not_evaluate_1","file":"Theorems_Eval.v","type":"Lemma","statement":"forall e, Val e -> eval e = None","proofLines":5,"uses":[],"usedBy":["values_do_not_evaluate_2"],"transitiveUses":0,"transitiveUsedBy":10},{"name":"values_do_not_evaluate_2","file":"Theorems_Eval.v","type":"Lemma","statement":"forall e e', eval e = Some e' -> is_val e = false","proofLines":5,"uses":["val_rel_equiv_is_val","values_do_not_evaluate_1"],"usedBy":["eval_correct_1","eval_correct_2"],"transitiveUses":2,"transitiveUsedBy":9},{"name":"eval_correct_1","file":"Theorems_Eval.v","type":"Lemma","statement":"forall e e', eval e = Some e' -> Eval e e'","proofLines":89,"uses":["values_do_not_evaluate_2","val_rel_equiv_is_val"],"usedBy":["eval_correct"],"transitiveUses":3,"transitiveUsedBy":7},{"name":"eval_correct_2","file":"Theorems_Eval.v","type":"Lemma","statement":"forall e e', Eval e e' -> eval e = Some e'","proofLines":40,"uses":["values_do_not_evaluate_2","val_rel_equiv_is_val"],"usedBy":["eval_correct"],"transitiveUses":3,"transitiveUsedBy":7},{"name":"eval_correct","file":"Theorems_Eval.v","type":"Theorem","statement":"forall e e', Eval e e' <-> eval e = Some e'","proofLines":3,"uses":["eval_correct_2","eval_correct_1"],"usedBy":["eval_func_reduces","eval_big_correct_1","eval_big_correct_2_aux"],"transitiveUses":5,"transitiveUsedBy":5},{"name":"subst'_reduces_aux","file":"Theorems_Eval.v","type":"Lemma","statement":"forall e1 x e2 e2', subexprs_count e1 = 1 -> subexprs_count e2 = subexprs_count e2' -> subexprs_count (subst' e1 x e2) = subexprs_count e2'","proofLines":21,"uses":[],"usedBy":["subst'_reduces"],"transitiveUses":0,"transitiveUsedBy":6},{"name":"subst'_reduces","file":"Theorems_Eval.v","type":"Lemma","statement":"forall e1 x e2 e2', subexprs_count e1 = 1 -> subexprs_count e2 = subexprs_count e2' -> subexprs_count (subst' e1 x e2) < subexprs_count (ELet e1 x e2')","proofLines":2,"uses":["subst'_reduces_aux"],"usedBy":["subst_reduces"],"transitiveUses":1,"transitiveUsedBy":5},{"name":"fresh_rename_keeps_count","file":"Theorems_Eval.v","type":"Lemma","statement":"forall e bv o, subexprs_count e = subexprs_count (fresh_rename e bv o)","proofLines":14,"uses":[],"usedBy":["subst_reduces"],"transitiveUses":0,"transitiveUsedBy":5},{"name":"subst_reduces","file":"Theorems_Eval.v","type":"Lemma","statement":"forall e1 x e2, subexprs_count e1 = 1 -> subexprs_count (subst e1 x e2) < subexprs_count (ELet e1 x e2)","proofLines":3,"uses":["subst'_reduces","fresh_rename_keeps_count"],"usedBy":["eval_reduces"],"transitiveUses":3,"transitiveUsedBy":4},{"name":"eval_reduces","file":"Theorems_Eval.v","type":"Lemma","statement":"forall e e', Eval e e' -> subexprs_count e' < subexprs_count e","proofLines":6,"uses":["subst_reduces"],"usedBy":["eval_func_reduces","well_typed_programs_terminate"],"transitiveUses":4,"transitiveUsedBy":3},{"name":"eval_func_reduces","file":"Theorems_Eval.v","type":"Corollary","statement":"forall e e', eval e = Some e' -> subexprs_count e' < subexprs_count e","proofLines":2,"uses":["eval_correct","eval_reduces"],"usedBy":[],"transitiveUses":11,"transitiveUsedBy":0},{"name":"eval_big_returns_value_or_none","file":"Theorems_Eval.v","type":"Lemma","statement":"forall e e', eval_big e = Some e' -> Val e'","proofLines":6,"uses":[],"usedBy":[],"transitiveUses":0,"transitiveUsedBy":0},{"name":"eval_big_gives_value","file":"Theorems_Eval.v","type":"Lemma","statement":"forall e e', EvalBig e e' -> Val e'","proofLines":3,"uses":[],"usedBy":["eval_big_equiv_eval_star_2"],"transitiveUses":0,"transitiveUsedBy":6},{"name":"EvalStarToEvalN","file":"Theorems_Eval.v","type":"Lemma","statement":"forall e e', EvalStar e e' -> exists n, EvalN e e' n","proofLines":4,"uses":[],"usedBy":["eval_big_equiv_eval_star_1","eval_big_correct_1"],"transitiveUses":0,"transitiveUsedBy":6},{"name":"EvalNToEvalStar","file":"Theorems_Eval.v","type":"Lemma","statement":"forall e e', (exists n, EvalN e e' n) -> EvalStar e e'","proofLines":3,"uses":[],"usedBy":["eval_big_equiv_eval_star_2","eval_big_correct_2"],"transitiveUses":0,"transitiveUsedBy":6},{"name":"eval_big_deterministic","file":"Theorems_Eval.v","type":"Lemma","statement":"forall e e' e'', EvalBig e e' -> EvalBig e e'' -> e' = e''","proofLines":22,"uses":[],"usedBy":["eval_big_equiv_eval_star_1"],"transitiveUses":0,"transitiveUsedBy":6},{"name":"plus_seq","file":"Theorems_Eval.v","type":"Lemma","statement":"forall n e1 e2 x, (EvalN (EPlus e1 e2) (ENum x) n) -> (exists x1 x2 n0 n1, EvalN e1 (ENum x1) n0 /\\ EvalN e2 (ENum x2) n1 /\\ x = x1 + x2 /\\ n = 1 + n0 + n1 )","proofLines":22,"uses":[],"usedBy":["eval_big_equiv_eval_star_1"],"transitiveUses":0,"transitiveUsedBy":7},{"name":"times_seq","file":"Theorems_Eval.v","type":"Lemma","statement":"forall n e1 e2 x, (EvalN (ETimes e1 e2) (ENum x) n) -> (exists x1 x2 n0 n1, EvalN e1 (ENum x1) n0 /\\ EvalN e2 (ENum x2) n1 /\\ x = x1 * x2 /\\ n = 1 + n0 + n1 )","proofLines":22,"uses":[],"usedBy":["eval_big_equiv_eval_star_1"],"transitiveUses":0,"transitiveUsedBy":7},{"name":"cat_seq","file":"Theorems_Eval.v","type":"Lemma","statement":"forall n e1 e2 x, (EvalN (ECat e1 e2) (EStr x) n) -> (exists x1 x2 n0 n1, EvalN e1 (EStr x1) n0 /\\ EvalN e2 (EStr x2) n1 /\\ x = append x1 x2 /\\ n = 1 + n0 + n1 )","proofLines":22,"uses":[],"usedBy":["eval_big_equiv_eval_star_1"],"transitiveUses":0,"transitiveUsedBy":7},{"name":"len_seq","file":"Theorems_Eval.v","type":"Lemma","statement":"forall n e1 x, (EvalN (ELen e1) (ENum x) n) -> (exists x1 n0, EvalN e1 (EStr x1) n0 /\\ x = length x1 /\\ n = 1 + n0 )","proofLines":12,"uses":[],"usedBy":["eval_big_equiv_eval_star_1"],"transitiveUses":0,"transitiveUsedBy":7},{"name":"let_seq","file":"Theorems_Eval.v","type":"Lemma","statement":"forall n e1 x e2 e', Val e' -> (EvalN (ELet e1 x e2) e' n) -> (exists e1' n0 n1, Val e1' /\\ EvalN e1 e1' n0 /\\ EvalN (subst e1' x e2) e' n1 /\\ n = 1 + n0 + n1 )","proofLines":26,"uses":[],"usedBy":["eval_big_equiv_eval_star_1"],"transitiveUses":0,"transitiveUsedBy":7},{"name":"eval_big_equiv_eval_star_1","file":"Theorems_Eval.v","type":"Lemma","statement":"forall e e', EvalStar e e' /\\ Val e' -> EvalBig e e'","proofLines":88,"uses":["EvalStarToEvalN","plus_seq","eval_big_deterministic","times_seq","cat_seq","len_seq","let_seq"],"usedBy":["eval_big_equiv_eval_star"],"transitiveUses":7,"transitiveUsedBy":6},{"name":"plus_seq_2","file":"Theorems_Eval.v","type":"Lemma","statement":"forall n1 n2 e1 x1 e2 x2, EvalN e1 (ENum x1) n1 -> EvalN e2 (ENum x2) n2 -> EvalN (EPlus e1 e2) (ENum (x1 + x2)) (1 + n1 + n2)","proofLines":18,"uses":[],"usedBy":["eval_big_equiv_eval_star_2"],"transitiveUses":0,"transitiveUsedBy":7},{"name":"times_seq_2","file":"Theorems_Eval.v","type":"Lemma","statement":"forall n1 n2 e1 x1 e2 x2, EvalN e1 (ENum x1) n1 -> EvalN e2 (ENum x2) n2 -> EvalN (ETimes e1 e2) (ENum (x1 * x2)) (1 + n1 + n2)","proofLines":18,"uses":[],"usedBy":["eval_big_equiv_eval_star_2"],"transitiveUses":0,"transitiveUsedBy":7},{"name":"cat_seq_2","file":"Theorems_Eval.v","type":"Lemma","statement":"forall n1 n2 e1 x1 e2 x2, EvalN e1 (EStr x1) n1 -> EvalN e2 (EStr x2) n2 -> EvalN (ECat e1 e2) (EStr (append x1 x2)) (1 + n1 + n2)","proofLines":18,"uses":[],"usedBy":["eval_big_equiv_eval_star_2"],"transitiveUses":0,"transitiveUsedBy":7},{"name":"len_seq_2","file":"Theorems_Eval.v","type":"Lemma","statement":"forall n1 e1 x1, EvalN e1 (EStr x1) n1 -> EvalN (ELen e1) (ENum (length x1)) (1 + n1)","proofLines":9,"uses":[],"usedBy":["eval_big_equiv_eval_star_2"],"transitiveUses":0,"transitiveUsedBy":7},{"name":"let_seq_2","file":"Theorems_Eval.v","type":"Lemma","statement":"forall n1 n2 e1 x e2 e1' e2', Val e1' -> Val e2' -> EvalN e1 e1' n1 -> EvalN (subst e1' x e2) e2' n2 -> EvalN (ELet e1 x e2) e2' (1 + n1 + n2)","proofLines":16,"uses":[],"usedBy":["eval_big_equiv_eval_star_2"],"transitiveUses":0,"transitiveUsedBy":7},{"name":"eval_big_equiv_eval_star_2","file":"Theorems_Eval.v","type":"Lemma","statement":"forall e e', EvalBig e e' -> EvalStar e e' /\\ Val e'","proofLines":23,"uses":["EvalNToEvalStar","plus_seq_2","times_seq_2","cat_seq_2","len_seq_2","let_seq_2","eval_big_gives_value"],"usedBy":["eval_big_equiv_eval_star"],"transitiveUses":7,"transitiveUsedBy":6},{"name":"eval_big_equiv_eval_star","file":"Theorems_Eval.v","type":"Theorem","statement":"forall e e', EvalBig e e' <-> EvalStar e e' /\\ Val e'","proofLines":3,"uses":["eval_big_equiv_eval_star_2","eval_big_equiv_eval_star_1"],"usedBy":["eval_big_correct_1","eval_big_correct_2","well_typed_programs_terminate"],"transitiveUses":16,"transitiveUsedBy":4},{"name":"eval_big_correct_1","file":"Theorems_Eval.v","type":"Lemma","statement":"forall e e', EvalBig e e' -> eval_big e = Some e'","proofLines":14,"uses":["eval_big_equiv_eval_star","EvalStarToEvalN","eval_correct"],"usedBy":["eval_big_correct"],"transitiveUses":23,"transitiveUsedBy":2},{"name":"eval_big_correct_2_aux","file":"Theorems_Eval.v","type":"Lemma","statement":"forall e e', eval_big e = Some e' -> exists n, EvalN e e' n /\\ Val e'","proofLines":8,"uses":["eval_correct"],"usedBy":["eval_big_correct_2"],"transitiveUses":6,"transitiveUsedBy":3},{"name":"eval_big_correct_2","file":"Theorems_Eval.v","type":"Lemma","statement":"forall e e', eval_big e = Some e' -> EvalBig e e'","proofLines":6,"uses":["eval_big_correct_2_aux","eval_big_equiv_eval_star","EvalNToEvalStar"],"usedBy":["eval_big_correct"],"transitiveUses":24,"transitiveUsedBy":2},{"name":"eval_big_correct","file":"Theorems_Eval.v","type":"Theorem","statement":"forall e e', EvalBig e e' <-> eval_big e = Some e'","proofLines":3,"uses":["eval_big_correct_1","eval_big_correct_2"],"usedBy":[],"transitiveUses":26,"transitiveUsedBy":0},{"name":"alpha_variants_same_eval_aux","file":"Theorems_Eval.v","type":"Theorem","statement":"forall e v, EvalBig e v -> (forall e', alpha_equiv_rel e e' -> EvalBig e' v)","proofLines":17,"uses":["rename_vs_subst_2","fresh_var_not_in_all_vars"],"usedBy":["alpha_variants_same_eval"],"transitiveUses":61,"transitiveUsedBy":2},{"name":"alpha_variants_same_eval","file":"Theorems_Eval.v","type":"Theorem","statement":"forall e e' v, alpha_equiv_rel e e' -> (EvalBig e v <-> EvalBig e' v)","proofLines":5,"uses":["alpha_variants_same_eval_aux"],"usedBy":[],"transitiveUses":62,"transitiveUsedBy":0},{"name":"unicity","file":"Theorems_TypeSystem.v","type":"Lemma","statement":"forall Gamma e t t', hastype Gamma e t -> hastype Gamma e t' -> t = t'","proofLines":5,"uses":[],"usedBy":["decomposition_aux"],"transitiveUses":0,"transitiveUsedBy":2},{"name":"inversion","file":"Theorems_TypeSystem.v","type":"Lemma","statement":"forall Gamma e t, hastype Gamma e t -> ( (forall (x: nat), e = EId x -> Gamma x = Some(t)) /\\ (forall (s: string), e = EStr s -> t = TStr) /\\ (forall (n: nat), e = ENum n -> t = TNum) /\\ (forall e1 e2, e = EPlus e1 e2 -> t = TNum /\\ hastype Gamma e1 TNum /\\ hastype Gamma e2 TNum) /\\ (forall e1 e2, e = ETimes e1 e2 -> t = TNum /\\ hastype Gamma e1 TNum /\\ hastype Gamma e2 TNum) /\\ (forall e1 e2, e = ECat e1 e2 -> t = TStr /\\ hastype Gamma e1 TStr /\\ hastype Gamma e2 TStr) /\\ (forall e1, e = ELen e1 -> t = TNum /\\ hastype Gamma e1 TStr) /\\ (forall e1 x e2, e = ELet e1 x e2 -> (exists t1 t2, t = t2 /\\ hastype Gamma e1 t1 /\\ hastype (update Gamma x t1) e2 t2)) )","proofLines":16,"uses":[],"usedBy":[],"transitiveUses":0,"transitiveUsedBy":0},{"name":"weakening","file":"Theorems_TypeSystem.v","type":"Lemma","statement":"forall Gamma e t, hastype Gamma e t -> (forall x t', Gamma x = None -> hastype (x |-> t'; Gamma) e t)","proofLines":17,"uses":["update_neq","update_shadow","update_permute"],"usedBy":[],"transitiveUses":3,"transitiveUsedBy":0},{"name":"weakening_2","file":"Theorems_TypeSystem.v","type":"Lemma","statement":"forall Gamma e t, hastype Gamma e t -> (forall x t', free_vars e x = false -> hastype (x |-> t'; Gamma) e t)","proofLines":23,"uses":["update_neq","update_shadow","update_permute"],"usedBy":["same_type_with_renamed","substitution_aux","decomposition_aux"],"transitiveUses":3,"transitiveUsedBy":10},{"name":"weakening_3","file":"Theorems_TypeSystem.v","type":"Lemma","statement":"forall Gamma e t x t', hastype (update Gamma x t') e t -> free_vars e x = false -> hastype Gamma e t","proofLines":32,"uses":["update_shadow","update_permute"],"usedBy":["same_type_with_renamed"],"transitiveUses":2,"transitiveUsedBy":8},{"name":"same_type_with_renamed","file":"Theorems_TypeSystem.v","type":"Lemma","statement":"forall Gamma e t x x' t', all_vars e x' = false -> hastype (x |-> t'; Gamma) e t <-> hastype (x' |-> t'; Gamma) (rename e x x') t","proofLines":107,"uses":["update_shadow","update_permute","weakening_2","not_in_expr_not_free","weakening_3"],"usedBy":["alpha_variants_same_type"],"transitiveUses":6,"transitiveUsedBy":7},{"name":"alpha_variants_same_type","file":"Theorems_TypeSystem.v","type":"Lemma","statement":"forall e e' Gamma t, alpha_equiv_rel e e' -> hastype Gamma e t -> hastype Gamma e' t","proofLines":30,"uses":["fresh_var_not_in_all_vars_left","fresh_var_not_in_all_vars_right","same_type_with_renamed"],"usedBy":["substitution","decomposition"],"transitiveUses":10,"transitiveUsedBy":5},{"name":"substitution_aux","file":"Theorems_TypeSystem.v","type":"Lemma","statement":"forall Gamma x t e t' e', (forall v, bound_vars e v = true -> free_vars e' v = false) -> hastype (x |-> t'; Gamma) e t -> hastype Gamma e' t' -> hastype Gamma (subst' e' x e) t","proofLines":62,"uses":["update_neq","update_shadow","update_permute","weakening_2"],"usedBy":["substitution"],"transitiveUses":4,"transitiveUsedBy":5},{"name":"substitution","file":"Theorems_TypeSystem.v","type":"Lemma","statement":"forall Gamma x t e t' e', hastype (x |-> t'; Gamma) e t -> hastype Gamma e' t' -> hastype Gamma (subst e' x e) t","proofLines":7,"uses":["substitution_aux","fresh_rename_removes_conflicts","alpha_variants_same_type","fresh_rename_keeps_alpha_equiv"],"usedBy":["preservation"],"transitiveUses":53,"transitiveUsedBy":3},{"name":"decomposition_aux","file":"Theorems_TypeSystem.v","type":"Lemma","statement":"forall Gamma e x e' t, (forall v, bound_vars e v = true -> free_vars e' v = false) -> hastype Gamma (subst' e' x e) t -> (forall t', hastype Gamma e' t' -> hastype (x |-> t'; Gamma) e t)","proofLines":57,"uses":["unicity","update_shadow","update_permute","weakening_2"],"usedBy":["decomposition"],"transitiveUses":5,"transitiveUsedBy":2},{"name":"decomposition","file":"Theorems_TypeSystem.v","type":"Lemma","statement":"forall Gamma e x e' t, hastype Gamma (subst e' x e) t -> (forall t', hastype Gamma e' t' -> hastype (x |-> t'; Gamma) e t)","proofLines":8,"uses":["alpha_variants_same_type","alpha_equiv_sym","fresh_rename_keeps_alpha_equiv","decomposition_aux","fresh_rename_removes_conflicts"],"usedBy":[],"transitiveUses":54,"transitiveUsedBy":0},{"name":"preservation","file":"Theorems_TypeSystem.v","type":"Theorem","statement":"forall Gamma e t e', hastype Gamma e t -> Eval e e' -> hastype Gamma e' t","proofLines":17,"uses":["substitution"],"usedBy":["type_safety","well_typed_programs_terminate"],"transitiveUses":54,"transitiveUsedBy":2},{"name":"canonical_forms","file":"Theorems_TypeSystem.v","type":"Lemma","statement":"forall Gamma e t, Val e -> hastype Gamma e t -> ( (t = TNum -> exists n, e = ENum n) /\\ (t = TStr -> exists s, e = EStr s) )","proofLines":6,"uses":[],"usedBy":["progress"],"transitiveUses":0,"transitiveUsedBy":3},{"name":"progress","file":"Theorems_TypeSystem.v","type":"Theorem","statement":"forall e t, hastype empty_ctx e t -> Val e \\/ exists e', Eval e e'","proofLines":66,"uses":["canonical_forms"],"usedBy":["type_safety","well_typed_programs_terminate"],"transitiveUses":1,"transitiveUsedBy":2},{"name":"type_safety","file":"Theorems_TypeSystem.v","type":"Theorem","statement":"forall e e' t, hastype empty_ctx e t -> EvalStar e e' -> Val e' \\/ exists e'', Eval e' e''","proofLines":3,"uses":["progress","preservation"],"usedBy":[],"transitiveUses":57,"transitiveUsedBy":0},{"name":"well_typed_programs_terminate","file":"Theorems_TypeSystem.v","type":"Theorem","statement":"forall e t, hastype empty_ctx e t -> exists e', EvalBig e e'","proofLines":22,"uses":["progress","preservation","eval_big_equiv_eval_star","eval_reduces"],"usedBy":[],"transitiveUses":79,"transitiveUsedBy":0}];
const taxonomyMetadata = {"harpersBook":["unicity","inversion","weakening","substitution","decomposition","EvalStarToEvalN","EvalNToEvalStar","finality_of_values","determinacy","canonical_forms","preservation","progress","type_safety"],"original":["well_typed_programs_terminate","eval_correct","eval_big_correct","eval_big_equiv_eval_star","eval_func_reduces","eval_big_returns_value_or_none","eval_big_gives_value","eval_big_deterministic","alpha_equiv_func_equiv_rel","alpha_equiv_Equiv","alpha_variants_same_type","alpha_variants_same_eval","substitutivity","alpha_equiv_preserved_by_plus","alpha_equiv_preserved_by_times","alpha_equiv_preserved_by_cat","alpha_equiv_preserved_by_len","alpha_equiv_preserved_by_let","fresh_rename_keeps_alpha_equiv"]};
